apply from: rootProject.file('gradle/lantern.gradle')

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.lanternpowered.run-configs'

// Basic project information
archivesBaseName = 'lantern-test-server'
// No version, every test plugin has it's own version
version = '' // 'cero.sero.zero'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)*.kotlinOptions {
    jvmTarget = '1.8'
    languageVersion = '1.3'
    freeCompilerArgs = [
            '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
            '-Xuse-experimental=kotlin.contracts.ExperimentalContracts'
    ]
}

sourceSets {
    packs {
        java.srcDirs = []
        resources.srcDirs = [ file('src/packs') ]
    }
    plugins {
        java {
            compileClasspath += main.output + main.compileClasspath + packs.output + packs.compileClasspath
            runtimeClasspath += main.output + main.runtimeClasspath + packs.output + packs.runtimeClasspath
        }
        kotlin {}
    }
}

runConfigurations {
    theConfig {
        name = 'Lantern Test Server'
        mainClass = 'org.lanternpowered.launch.LanternLaunch'
        workingDirectory = 'run'
        targetSourceSet = sourceSets.plugins
    }
}

jar {
    from sourceSets.plugins.output
}

sourceJar {
    from sourceSets.plugins.allSource
}

// Add a nice 'mcmod.info' file to the final jar
sponge {
    plugin {
        id = archivesBaseName.replace('-', '_')
        meta {
            name = 'Lantern Test Plugins'
            description = 'A collection of plugins that are used to test the functionality of the lantern server.'
            authors = [
                    'Cybermaxke',
                    'Meronat',
            ]
        }
    }
}

// Project dependencies
dependencies {
    compile rootProject
}

// The 'assemble' task is never called in this
// sub project, so we need an alternative
jar.dependsOn sourceJar

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render correctly for cfamily 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="cfamily"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: <image ready for your build toolchain>

definitions:
  steps:
    - step: &build-step
        name: Build the project, and run the SonarQube analysis
        script:
          - export SONAR_SCANNER_VERSION=4.6.2.2472
          - mkdir $HOME/.sonar
          - curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip \${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip
          - unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          - curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-\${SONAR_SCANNER_VERSION}-linux.zip
          - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          - export PATH=\\"$PATH:$HOME/.sonar/sonar-scanner-\${SONAR_SCANNER_VERSION}-linux/bin\\"
          - <any step required before running your build, like ./configure>
          - $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output <your clean build command>
          - sonar-scanner -Dsonar.cfamily.build-wrapper-output=bw-output  
  caches:
    sonar: ~/.sonar

clone:
  depth: full

pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step
"
  />
  <CompilationInfo
    className="abs-width-800"
  />
</Fragment>
`;

exports[`should render correctly for cfamily: with branch enabled 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="cfamily"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: <image ready for your build toolchain>

definitions:
  steps:
    - step: &build-step
        name: Build the project, and run the SonarQube analysis
        script:
          - export SONAR_SCANNER_VERSION=4.6.2.2472
          - mkdir $HOME/.sonar
          - curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip \${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip
          - unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          - curl -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-\${SONAR_SCANNER_VERSION}-linux.zip
          - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          - export PATH=\\"$PATH:$HOME/.sonar/sonar-scanner-\${SONAR_SCANNER_VERSION}-linux/bin\\"
          - <any step required before running your build, like ./configure>
          - $HOME/.sonar/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output <your clean build command>
          - sonar-scanner -Dsonar.cfamily.build-wrapper-output=bw-output  
  caches:
    sonar: ~/.sonar

clone:
  depth: full

pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step

  pull-requests:
    '**':
      - step: *build-step"
  />
  <CompilationInfo
    className="abs-width-800"
  />
</Fragment>
`;

exports[`should render correctly for dotnet 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="dotnet"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: mcr.microsoft.com/dotnet/core/sdk:latest

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        caches:
          - dotnetcore
          - sonar
        script:
          - apt-get update
          - apt-get install --yes openjdk-11-jre
          - dotnet tool install --global dotnet-sonarscanner
          - export PATH=\\"$PATH:/root/.dotnet/tools\\"
          - dotnet sonarscanner begin /k:\\"my-project\\" /d:\\"sonar.login=\${SONAR_TOKEN}\\"  /d:\\"sonar.host.url=\${SONAR_HOST_URL}\\"
          - dotnet build 
          - dotnet sonarscanner end /d:\\"sonar.login=\${SONAR_TOKEN}\\"
  caches:
    sonar: ~/.sonar

pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step
"
  />
</Fragment>
`;

exports[`should render correctly for dotnet: with branch enabled 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="dotnet"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: mcr.microsoft.com/dotnet/core/sdk:latest

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        caches:
          - dotnetcore
          - sonar
        script:
          - apt-get update
          - apt-get install --yes openjdk-11-jre
          - dotnet tool install --global dotnet-sonarscanner
          - export PATH=\\"$PATH:/root/.dotnet/tools\\"
          - dotnet sonarscanner begin /k:\\"my-project\\" /d:\\"sonar.login=\${SONAR_TOKEN}\\"  /d:\\"sonar.host.url=\${SONAR_HOST_URL}\\"
          - dotnet build 
          - dotnet sonarscanner end /d:\\"sonar.login=\${SONAR_TOKEN}\\"
  caches:
    sonar: ~/.sonar

pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step

  pull-requests:
    '**':
      - step: *build-step"
  />
</Fragment>
`;

exports[`should render correctly for gradle 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="gradle"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: openjdk:8

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        caches:
          - gradle
          - sonar
        script:
          - bash ./gradlew sonarqube
  caches:
    sonar: ~/.sonar

clone:
  depth: full
  
pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step
"
  />
</Fragment>
`;

exports[`should render correctly for gradle: with branch enabled 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="gradle"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: openjdk:8

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        caches:
          - gradle
          - sonar
        script:
          - bash ./gradlew sonarqube
  caches:
    sonar: ~/.sonar

clone:
  depth: full
  
pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step

  pull-requests:
    '**':
      - step: *build-step"
  />
</Fragment>
`;

exports[`should render correctly for maven 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="maven"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: maven:3-openjdk-11

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        caches:
          - maven
          - sonar
        script:
          - mvn verify sonar:sonar -Dsonar.projectKey=my-project
  caches:
    sonar: ~/.sonar

clone:
  depth: full
  
pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step
"
  />
</Fragment>
`;

exports[`should render correctly for maven: with branch enabled 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="maven"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: maven:3-openjdk-11

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        caches:
          - maven
          - sonar
        script:
          - mvn verify sonar:sonar -Dsonar.projectKey=my-project
  caches:
    sonar: ~/.sonar

clone:
  depth: full
  
pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step

  pull-requests:
    '**':
      - step: *build-step"
  />
</Fragment>
`;

exports[`should render correctly for other 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="other"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: maven:3.3.9

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        script:
          - pipe: sonarsource/sonarqube-scan:1.0.0
            variables:
              SONAR_HOST_URL: \${SONAR_HOST_URL} # Get the value from the repository/workspace variable.
              SONAR_TOKEN: \${SONAR_TOKEN} # Get the value from the repository/workspace variable. You shouldn't set secret in clear text here.
  caches:
    sonar: ~/.sonar

clone:
  depth: full

pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step
"
  />
</Fragment>
`;

exports[`should render correctly for other: with branch enabled 1`] = `
<Fragment>
  <PreambuleYaml
    buildTool="other"
    component={
      Object {
        "breadcrumbs": Array [],
        "key": "my-project",
        "name": "MyProject",
        "qualifier": "TRK",
        "qualityGate": Object {
          "isDefault": true,
          "key": "30",
          "name": "Sonar way",
        },
        "qualityProfiles": Array [
          Object {
            "deleted": false,
            "key": "my-qp",
            "language": "ts",
            "name": "Sonar way",
          },
        ],
        "tags": Array [],
      }
    }
  />
  <CreateYmlFile
    yamlFileName="bitbucket-pipelines.yml"
    yamlTemplate="image: maven:3.3.9

definitions:
  steps:
    - step: &build-step
        name: SonarQube analysis
        script:
          - pipe: sonarsource/sonarqube-scan:1.0.0
            variables:
              SONAR_HOST_URL: \${SONAR_HOST_URL} # Get the value from the repository/workspace variable.
              SONAR_TOKEN: \${SONAR_TOKEN} # Get the value from the repository/workspace variable. You shouldn't set secret in clear text here.
  caches:
    sonar: ~/.sonar

clone:
  depth: full

pipelines:
  branches:
    '{master}': # or the name of your main branch
      - step: *build-step

  pull-requests:
    '**':
      - step: *build-step
"
  />
</Fragment>
`;

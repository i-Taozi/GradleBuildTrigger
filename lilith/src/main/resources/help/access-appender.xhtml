<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>Using the Lilith Access Socket Appender</title>
	<link href="help.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<p><a href="index.xhtml">ToC</a></p>

<h1 id="top">Using the Lilith Access Socket Appender</h1>

<p>The Lilith Access Socket Appender is a replacement for <code>ch.qos.logback.access.net.SocketAppender</code>.
	While LogBACK's appender is stream-based, i.e. it streams access events using an <code>ObjectOutputStream</code>, the
	Lilith appender is message based, i.e. it sends access events one after the other as single messages.</p>

<p>A message consists of an integer that specifies the number of bytes of the following event, followed by the
	bytes of the serialized event.</p>

<p>This has several benefits:</p>
<ul>
	<li>Sending to multiple remote hosts is supported while the event is only serialized once.</li>
	<li>Events can (and should) be compressed using GZIP.</li>
	<li>The appender supports heartbeat and timeout.
		<ul>
			<li>The event receiver can find out that the event sender connection died if a heartbeat is missing.</li>
			<li>The event sender can find out that the event receiver connection died by means of a timeout</li>
		</ul>
		This means that an application won't stop (at least not for very long) in case of network problems.
	</li>
</ul>

<p>The multiplex appenders are now creating a UUID be default. This enables Lilith to reattach a connection to an existing
	view after the connection has been lost for some reason. It has the advantage that already executing filters won't have to be
	restarted for every new connection. The previous behavior can be enforced by disabling the creation of the UUID
	by means of <code>&lt;CreatingUUID&gt;false&lt;/CreatingUUID&gt;</code> in the Logback configuration.</p>

<p>Add the following to your applications <code>pom.xml</code> file:</p>
		<pre><code><![CDATA[<plugin>
  <groupId>org.mortbay.jetty</groupId>
  <artifactId>maven-jetty-plugin</artifactId>
  <configuration>
    <scanIntervalSeconds>10</scanIntervalSeconds>
    <connectors>
      <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
        <port>8080</port>
        <maxIdleTime>60000</maxIdleTime>
      </connector>
    </connectors>
    <requestLog implementation="ch.qos.logback.access.jetty.RequestLogImpl">
      <fileName>src/main/jetty/logback-access.xml</fileName>
    </requestLog>
  </configuration>
  <dependencies>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>${slf4jVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logbackVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logbackVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-access</artifactId>
      <version>${logbackVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>de.huxhorn.lilith</groupId>
      <artifactId>de.huxhorn.lilith.logback.appender.multiplex-access</artifactId>
      <version>${lilithVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <!--
    <dependency>
      <groupId>de.huxhorn.lilith</groupId>
      <artifactId>de.huxhorn.lilith.logback.encoder.access</artifactId>
      <version>${lilithVersion}</version>
      <scope>runtime</scope>
    </dependency>
    -->
  </dependencies>
</plugin>]]></code></pre>

<p>Then, put the following into <code>src/main/jetty/logback-access.xml</code> file:</p>
		<pre><code><![CDATA[<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <layout class="ch.qos.logback.access.PatternLayout">
      <Pattern>combined</Pattern>
    </layout>
  </appender>
  <appender name="multiplex" class="de.huxhorn.lilith.logback.appender.AccessMultiplexSocketAppender">
    <Compressing>true</Compressing> <!-- will automatically use correct default port -->
    <!-- Default port for compressed is 10010 and uncompressed 10011 -->
    <ReconnectionDelay>30000</ReconnectionDelay>
    <RemoteHosts>localhost</RemoteHosts>
    <!--
    Optional:
    <CreatingUUID>false</CreatingUUID>
    -->
  </appender>

  <appender-ref ref="STDOUT" />
  <appender-ref ref="multiplex" />
</configuration>]]></code></pre>

<p><a href="#top">Back to top.</a></p>

<h2>logback-access SocketAppender</h2>
Lilith listens for connections of the logback-access SocketAppender on port 4570.

<p>Add the following dependency to your applications <code>pom.xml</code> file:</p>
		<pre><code><![CDATA[<dependency>
  <groupId>ch.qos.logback</groupId>
  <artifactId>logback-access</artifactId>
  <version>${logbackVersion}</version>
  <scope>runtime</scope>
</dependency>]]></code></pre>

<p>Then, add the following to your <code>logback-access.xml</code> file:</p>
		<pre><code><![CDATA[<appender name="LogbackAccess" class="ch.qos.logback.access.net.SocketAppender">
  <RemoteHost>localhost</RemoteHost>
  <Port>4570</Port>
  <ReconnectionDelay>170</ReconnectionDelay>
  <IncludeCallerData>true</IncludeCallerData>
</appender>
]]></code></pre>

<p><a href="#top">Back to top.</a></p>
</body>
</html>

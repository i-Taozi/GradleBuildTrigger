/*
The MIT License (MIT)

Copyright (c) 2021 Pierre Lindenbaum

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


*/
package com.github.lindenb.jvarkit.lang.primitive;

#if($primitive=="double")
#set( $className = "Double" )
#set( $javaName = "Double" )
#elseif($primitive=="float")
#set( $className = "Float" )
#set( $javaName = "Float" )
#elseif($primitive=="byte")
#set( $className = "Byte" )
#set( $javaName = "Byte" )
#elseif($primitive=="char")
#set( $className = "Char" )
#set( $javaName = "Character" )
#elseif($primitive=="short")
#set( $className = "Short" )
#set( $javaName = "Short" )
#elseif($primitive=="int")
#set( $className = "Int" )
#set( $javaName = "Integer" )
#elseif($primitive=="long")
#set( $className = "Long" )
#set( $javaName = "Long" )
#end

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
#if($primitive=="float" || $primitive=="byte"|| $primitive=="short"|| $primitive=="char")
import java.util.stream.Stream;
#else
import java.util.PrimitiveIterator;
import java.util.stream.${className}Stream;
#end

/**
 * wrapper for an array of ${primitive}.
 * GENERATED : DO NOT EDIT.
 */
public class ${className}Array extends BaseArray<${javaName}> {
	private static final long serialVersionUID = 1L;
	private ${primitive}[] array;
	
	/** default constructor */
	public ${className}Array() {
		this(100);
	}
	/** copy constructor */
	public ${className}Array(final ${className}Array copy) {
		this(copy.array,0,copy.mSize);
	}

	/** constructor with prefilled 'N' values  */
	public ${className}Array(final int size,final ${primitive} defaultValue) {
		this(size);
		super.mSize = size;
		Arrays.fill(this.array,defaultValue);
	}


	/** constructor with defined buffer capacity */
	public ${className}Array(final int capacity) {
		super();
		if(capacity < 0) throw new IllegalArgumentException("capacity <0 : "+ capacity);
		this.array = new ${primitive}[capacity];
	}
	
	/** create a copy of values from off with size=len */
	public ${className}Array(final ${primitive} values[],int off, int len) {
		this(len);
		System.arraycopy(values, off, this.array, 0, len);
		super.mSize = len;
		}
	/** create a copy of values */
	public ${className}Array(final ${primitive} values[]) {
		this(values,0,values.length);
	}
	
	/** create a IntArray by wrapping the already existing array 'values'
	 * returned IntArray is now owner of the array
	 * */
	public static ${className}Array wrap(final ${primitive} values[]) {
		final ${className}Array a = new ${className}Array(0);
		a.array = values;
		a.mSize = values.length;
		return a;
	}
	
	/** slice a copy of the array */
	public ${className}Array slice(final int off,final int len) {
		if(off+len>size()) throw new IndexOutOfBoundsException("0<="+(off+len)+"<="+size());
		return new ${className}Array(this.array,off,len);
	}
	
	/** slice a copy of the array.  It extracts through the end of the sequence  */
	public ${className}Array slice(final int off) {
		return new ${className}Array(this.array,off,size()-off);
	}
	
	/** set size to zero */
	public ${className}Array clear() {
		super.mSize = 0;
		return this;
	}
	
	/** return index-th value */
	public ${primitive} get(int index) {
		return this.array[check(index)];
	}

	/** set index-th value , return previous value*/
	public ${primitive} set(int index,final ${primitive} value) {
		final ${primitive} old = this.array[check(index)];
		this.array[index] = value;
		return old;
	}
	
	private void ensure(final int n) {
		final int avail = this.array.length - super.mSize;
		if(avail < n) {
			this.array  = Arrays.copyOf(this.array,extendSize(this.array.length,n));
			}
		}
	
	/** push back the value */
	public ${primitive} add(final ${primitive} value) {
		ensure(1);
		this.array[super.mSize] = value;
		super.mSize++;
		return value;
	}
	
	public ${className}Array addAll(final ${className}Array o) {
		return addAll(o.array,0,o.mSize);
		}
	
	public ${className}Array addAll(final ${primitive}[] values) {
		return addAll(values,0,values.length);
		}
	
	public ${className}Array addAll(final ${primitive}[] values,int off,int len) {
		ensure(len);
		System.arraycopy(values, off, this.array, super.mSize, len);
		super.mSize+=len;
		return this;
		}
	
	public ${className}Array addAll(final Collection<${javaName}> col) {
		ensure(col.size());
		final Iterator<${javaName}> iter = col.iterator();
		while(iter.hasNext()) {
			this.array[super.mSize] = iter.next();
			super.mSize++;
			}
		return this;
	}
	
	/** remove 1st value */
	public ${primitive} popFront() {
		return remove(0);
		}
	
	/** remove last value */
	public ${primitive} popBack() {
		return remove(size()-1);
		}
	
	
	/** remove idx-th value */
	public ${primitive} remove(final int idx) {
		final ${primitive} old = this.array[check(idx)];
		if(idx+1< super.mSize) {
			System.arraycopy(
				this.array, idx+1,
				this.array, idx,
				super.mSize - (idx+1));
			}
		super.mSize--;
		return old;
	}

	public int indexOf(int index,final ${primitive} value) {
		while(index < size()) {
			if(get(index)==value) return index;
			index++;
			}
		return -1;
		}
		
	public int indexOf(final ${primitive} value) {
		return isEmpty()?-1:indexOf(0,value);
		}
	
	public boolean contains(final ${primitive} value) {
		return indexOf(value)!=-1;
	}
	
	public ${primitive} insert(int index,${primitive} value) {
		ensure(1);
		if(index<= super.mSize) {
			System.arraycopy(
				this.array, index,
				this.array, index+1,
				super.mSize - index);
			}
		this.array[index]=value;
		super.mSize++;
		return value;
	}
	
	#if($primitive=="float" || $primitive=="byte"|| $primitive=="short"|| $primitive=="char")
 	@Override
 	public Iterator<${javaName}> iterator() {
 		return asList().iterator();
 	}
 	
 	public Stream<${javaName}> stream() {
 		return asList().stream();
 		}
 	
 	
 	#else
	public ${className}Stream stream() {
		return Arrays.stream(this.array, 0, super.mSize);
	}
	
	
	@Override
	public PrimitiveIterator.Of${className} iterator() {
		return stream().iterator();
	}
	#end
	
	/** sort this data */
	public ${className}Array sort() {
		Arrays.sort(this.array,0,super.mSize);
		return this;
	}
	
	/** convert to array. The array is a *copy* of the original data */
	public ${primitive}[] toArray() {
		return Arrays.copyOf(this.array, super.mSize);
	}
	
	/** clone this object */
	public ${className}Array clone() {
		return new ${className}Array(this);
	}
	
	@Override
	public int hashCode() {
		int result = 0;
		for(int i=0;i< super.mSize;i++) {
	        result = 31 * result + ${javaName}.hashCode(this.array[i]);
			}
		return result;
		}
		
	@Override
	protected final ${javaName} getElementAt(final int idx)
		{
		return get(idx);
		}
	@Override
	protected final ${javaName} setElementAt(final int idx,final ${javaName} value)
		{
		return set(idx,value);
		}
	@Override
	protected final void addElement(final ${javaName} value)
		{
		this.add(value);
		}
	@Override
	protected final ${javaName} removeElementAt(final int idx)
		{
		return this.remove(idx);
		}
	
	
	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		for(int i=0;i< size();i++) {
			if(i>0) sb.append(',');
			sb.append(get(i));
			}
		return sb.toString();
		}
	
	public static ${className}Array read(final DataInputStream in) throws IOException {
		final int n=in.readInt();
		final ${className}Array vec = new ${className}Array(n);
		for(int i=0;i< n;i++) {
			vec.add(in.read${className}());
			}
		return vec;
		}
	
	public static void write(final DataOutputStream out,${className}Array vec) throws IOException {
		out.writeInt(vec.size());
		for(int i=0;i< vec.size();i++) {
			out.write${className}(vec.get(i));
			}
		}
	}
